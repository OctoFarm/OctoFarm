{"version":3,"file":"js/sse.client.1.7.0-development.5.min.js","mappings":"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","sources":["webpack://octofarm-client/./node_modules/flatted/esm/index.js","webpack://octofarm-client/./js/utils/sse.utils.js","webpack://octofarm-client/./js/exceptions/error.types.js","webpack://octofarm-client/./js/exceptions/octofarm-client.exceptions.js","webpack://octofarm-client/./js/exceptions/application-error.handler.js","webpack://octofarm-client/./entry/sse.client.js"],"sourcesContent":["/*! (c) 2020 Andrea Giammarchi */\n\nconst {parse: $parse, stringify: $stringify} = JSON;\nconst {keys} = Object;\n\nconst Primitive = String;   // it could be Number\nconst primitive = 'string'; // it could be 'number'\n\nconst ignore = {};\nconst object = 'object';\n\nconst noop = (_, value) => value;\n\nconst primitives = value => (\n  value instanceof Primitive ? Primitive(value) : value\n);\n\nconst Primitives = (_, value) => (\n  typeof value === primitive ? new Primitive(value) : value\n);\n\nconst revive = (input, parsed, output, $) => {\n  const lazy = [];\n  for (let ke = keys(output), {length} = ke, y = 0; y < length; y++) {\n    const k = ke[y];\n    const value = output[k];\n    if (value instanceof Primitive) {\n      const tmp = input[value];\n      if (typeof tmp === object && !parsed.has(tmp)) {\n        parsed.add(tmp);\n        output[k] = ignore;\n        lazy.push({k, a: [input, parsed, tmp, $]});\n      }\n      else\n        output[k] = $.call(output, k, tmp);\n    }\n    else if (output[k] !== ignore)\n      output[k] = $.call(output, k, value);\n  }\n  for (let {length} = lazy, i = 0; i < length; i++) {\n    const {k, a} = lazy[i];\n    output[k] = $.call(output, k, revive.apply(null, a));\n  }\n  return output;\n};\n\nconst set = (known, input, value) => {\n  const index = Primitive(input.push(value) - 1);\n  known.set(value, index);\n  return index;\n};\n\nexport const parse = (text, reviver) => {\n  const input = $parse(text, Primitives).map(primitives);\n  const value = input[0];\n  const $ = reviver || noop;\n  const tmp = typeof value === object && value ?\n              revive(input, new Set, value, $) :\n              value;\n  return $.call({'': tmp}, '', tmp);\n};\n\nexport const stringify = (value, replacer, space) => {\n  const $ = replacer && typeof replacer === object ?\n            (k, v) => (k === '' || -1 < replacer.indexOf(k) ? v : void 0) :\n            (replacer || noop);\n  const known = new Map;\n  const input = [];\n  const output = [];\n  let i = +set(known, input, $.call({'': value}, '', value));\n  let firstRun = !i;\n  while (i < input.length) {\n    firstRun = true;\n    output[i] = $stringify(input[i++], replace, space);\n  }\n  return '[' + output.join(',') + ']';\n  function replace(key, value) {\n    if (firstRun) {\n      firstRun = !firstRun;\n      return value;\n    }\n    const after = $.call(this, key, value);\n    switch (typeof after) {\n      case object:\n        if (after === null) return after;\n      case primitive:\n        return known.get(after) || set(known, input, after);\n    }\n    return after;\n  }\n};\n\nexport const toJSON = any => $parse(stringify(any));\nexport const fromJSON = any => parse($stringify(any));\n","import { parse } from \"flatted\";\n\nexport const asyncParse = async function (str) {\n  try {\n    return parse(str);\n  } catch (e) {\n    return false;\n  }\n};\nexport const isFunction = function (functionToCheck) {\n  return (\n    functionToCheck && {}.toString.call(functionToCheck) === \"[object Function]\"\n  );\n};\n\nexport const debounce = function (func, wait) {\n  let timeout;\n  let waitFunc;\n  return function () {\n    if (isFunction(wait)) {\n      waitFunc = wait;\n    } else {\n      waitFunc = function () {\n        return wait;\n      };\n    }\n\n    const context = this,\n      args = arguments;\n    const later = function () {\n      timeout = null;\n      func.apply(context, args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, waitFunc());\n  };\n};\n","const errorTypes = {\n  CLIENT: \"CLIENT\",\n  SERVER: \"SERVER\",\n  NETWORK: \"NETWORK\",\n  UNKNOWN: \"UNKNOWN\",\n  SILENT: \"SILENT\",\n};\n\nexport { errorTypes };\n","import { errorTypes } from \"./error.types\";\n\nexport const ClientErrors = {\n  FAILED_VALIDATION_PATH: {\n    type: errorTypes.CLIENT,\n    color: \"danger\",\n    code: \"FAILED_VALIDATION_PATH\",\n    message: \"Input validation failed, no path was supplied\",\n    statusCode: 412,\n  },\n  FAILED_VALIDATION_KEY: {\n    type: errorTypes.CLIENT,\n    color: \"danger\",\n    code: \"FAILED_VALIDATION_KEY\",\n    message: \"Input validation failed, no key was supplied\",\n    statusCode: 412,\n  },\n  FAILED_STATE_UPDATE: {\n    type: errorTypes.CLIENT,\n    color: \"warning\",\n    code: \"FAILED_STATE_UPDATE\",\n    message: \"There was an issue updating the printer state\",\n    statusCode: 412,\n  },\n  UNKNOWN_ERROR: {\n    type: errorTypes.UNKNOWN,\n    color: \"danger\",\n    code: \"UNKNOWN_ERROR\",\n    message:\n      \"We encountered an unknown error! Please help the developer out and send a issue report!\",\n    statusCode: 999,\n  },\n  SILENT_ERROR: {\n    type: errorTypes.UNKNOWN,\n    color: \"danger\",\n    code: \"SILENT_ERROR\",\n    message: \"\",\n    statusCode: 999,\n  },\n};\n","export class ApplicationError extends Error {\n  static hasErrorNotificationBeenTriggered = false;\n  constructor(options, overrides) {\n    super();\n    Object.assign(options, overrides);\n\n    this.name = \"OctoFarm Error\";\n    this.type = options.type;\n    this.code = options.code;\n    this.message = options.message;\n    this.errors = options.errors;\n    this.meta = options.meta;\n    this.statusCode = options.statusCode;\n    this.color = options.color;\n    // {\n    //   analytics:  {},\n    //   context: {}\n    // }\n\n    // Trigger Error Notification\n    ApplicationError.hasErrorNotificationBeenTriggered = true;\n  }\n}\n","import { asyncParse, debounce } from '../js/utils/sse.utils';\nimport { ClientErrors } from '../js/exceptions/octofarm-client.exceptions';\nimport { ApplicationError } from '../js/exceptions/application-error.handler';\n\n// reconnectFrequencySeconds doubles every retry\nlet reconnectFrequencySeconds = 1;\nlet evtSource;\nlet evtURL;\n\nconst reconnectFunc = debounce(\n  function () {\n    setupEventSource();\n    // Double every attempt to avoid overwhelming server\n    reconnectFrequencySeconds *= 2;\n    // Max out at ~1 minute as a compromise between user experience and server load\n    if (reconnectFrequencySeconds >= 64) {\n      reconnectFrequencySeconds = 64;\n    }\n  },\n  function () {\n    return reconnectFrequencySeconds * 1000;\n  }\n);\n\nfunction setupEventSource(url) {\n  if (url) {\n    evtURL = url;\n  } else {\n    url = evtURL;\n  }\n  evtSource = new EventSource(url);\n  evtSource.onmessage = async function (e) {\n    if (!!e.data) {\n      const res = await asyncParse(e.data);\n      postMessage(res);\n    }\n  };\n  evtSource.onopen = function (e) {\n    console.debug('Connected to ' + url);\n    // Reset reconnect frequency upon successful connection\n    reconnectFrequencySeconds = 1;\n  };\n  evtSource.onerror = async function (e) {\n    console.error('Issue with SSE connection... ');\n    postMessage(false);\n    evtSource.close();\n    reconnectFunc();\n    const errorObject = ClientErrors.SILENT_ERROR;\n    errorObject.message = `SSE Error - ${e}`;\n    throw new ApplicationError(errorObject);\n  };\n  evtSource.onclose = async function () {\n    console.warning('Closed SSE connection... ');\n    postMessage(false);\n    evtSource.close();\n    reconnectFunc();\n  };\n}\n\nself.addEventListener(\n  'message',\n  function (e) {\n    const url = e.data.url;\n    setupEventSource(url);\n  },\n  false\n);\n"],"names":["parse","$parse","stringify","$stringify","JSON","keys","Object","Primitive","String","ignore","object","noop","_","value","primitives","Primitives","revive","input","parsed","output","$","lazy","ke","length","y","k","tmp","has","call","add","push","a","i","apply","isFunction","functionToCheck","toString","errorTypes","ClientErrors","FAILED_VALIDATION_PATH","type","color","code","message","statusCode","FAILED_VALIDATION_KEY","FAILED_STATE_UPDATE","UNKNOWN_ERROR","SILENT_ERROR","ApplicationError","Error","constructor","options","overrides","super","assign","this","name","errors","meta","hasErrorNotificationBeenTriggered","evtSource","evtURL","reconnectFrequencySeconds","reconnectFunc","func","wait","timeout","waitFunc","context","args","arguments","later","clearTimeout","setTimeout","debounce","setupEventSource","url","EventSource","onmessage","async","e","data","res","str","text","reviver","map","Set","asyncParse","postMessage","onopen","console","debug","onerror","error","close","errorObject","onclose","warning","self","addEventListener"],"sourceRoot":""}