{"version":3,"sources":["webpack://@notexpectedyet/octofarm-client/./js/utils/sse.utils.js","webpack://@notexpectedyet/octofarm-client/./node_modules/flatted/esm/index.js","webpack://@notexpectedyet/octofarm-client/webpack/bootstrap","webpack://@notexpectedyet/octofarm-client/webpack/runtime/define property getters","webpack://@notexpectedyet/octofarm-client/webpack/runtime/hasOwnProperty shorthand","webpack://@notexpectedyet/octofarm-client/webpack/runtime/make namespace object","webpack://@notexpectedyet/octofarm-client/./js/amialive.service.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA8B;;AAEvB;AACP;AACA,WAAW,8CAAK;AAChB,GAAG;AACH;AACA;AACA;AACO;AACP,8BAA8B;AAC9B;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClCA;;AAEA,OAAO,qCAAqC;AAC5C,OAAO,KAAK;;AAEZ,yBAAyB;AACzB,2BAA2B;;AAE3B;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,OAAO,aAAa,YAAY;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO,eAAe,YAAY;AAC9C,WAAW,KAAK;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACA;;;;;;;UC7FP;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;ACNuD;;;AAGvD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,cAAc;AACd;AACA,UAAU;AACV;AACA,QAAQ;AACR;AACA;AACA,+DAA+D,+BAA+B,MAAM,6CAA6C,EAAE;AACnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,0DAAQ;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAU;AACtB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA","file":"amialive.service.min.js","sourcesContent":["import {parse} from \"flatted\";\r\n\r\nexport const asyncParse = async function (str) {\r\n  try {\r\n    return parse(str);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\nexport const isFunction = function (functionToCheck) {\r\n  return functionToCheck && {}.toString.call(functionToCheck) === \"[object Function]\";\r\n};\r\n\r\nexport const debounce = function (func, wait) {\r\n  let timeout;\r\n  let waitFunc;\r\n  return function () {\r\n    if (isFunction(wait)) {\r\n      waitFunc = wait;\r\n    } else {\r\n      waitFunc = function () {\r\n        return wait;\r\n      };\r\n    }\r\n\r\n    const context = this,\r\n      args = arguments;\r\n    const later = function () {\r\n      timeout = null;\r\n      func.apply(context, args);\r\n    };\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, waitFunc());\r\n  };\r\n};\r\n","/*! (c) 2020 Andrea Giammarchi */\n\nconst {parse: $parse, stringify: $stringify} = JSON;\nconst {keys} = Object;\n\nconst Primitive = String;   // it could be Number\nconst primitive = 'string'; // it could be 'number'\n\nconst ignore = {};\nconst object = 'object';\n\nconst noop = (_, value) => value;\n\nconst primitives = value => (\n  value instanceof Primitive ? Primitive(value) : value\n);\n\nconst Primitives = (_, value) => (\n  typeof value === primitive ? new Primitive(value) : value\n);\n\nconst revive = (input, parsed, output, $) => {\n  const lazy = [];\n  for (let ke = keys(output), {length} = ke, y = 0; y < length; y++) {\n    const k = ke[y];\n    const value = output[k];\n    if (value instanceof Primitive) {\n      const tmp = input[value];\n      if (typeof tmp === object && !parsed.has(tmp)) {\n        parsed.add(tmp);\n        output[k] = ignore;\n        lazy.push({k, a: [input, parsed, tmp, $]});\n      }\n      else\n        output[k] = $.call(output, k, tmp);\n    }\n    else if (output[k] !== ignore)\n      output[k] = $.call(output, k, value);\n  }\n  for (let {length} = lazy, i = 0; i < length; i++) {\n    const {k, a} = lazy[i];\n    output[k] = $.call(output, k, revive.apply(null, a));\n  }\n  return output;\n};\n\nconst set = (known, input, value) => {\n  const index = Primitive(input.push(value) - 1);\n  known.set(value, index);\n  return index;\n};\n\nexport const parse = (text, reviver) => {\n  const input = $parse(text, Primitives).map(primitives);\n  const value = input[0];\n  const $ = reviver || noop;\n  const tmp = typeof value === object && value ?\n              revive(input, new Set, value, $) :\n              value;\n  return $.call({'': tmp}, '', tmp);\n};\n\nexport const stringify = (value, replacer, space) => {\n  const $ = replacer && typeof replacer === object ?\n            (k, v) => (k === '' || -1 < replacer.indexOf(k) ? v : void 0) :\n            (replacer || noop);\n  const known = new Map;\n  const input = [];\n  const output = [];\n  let i = +set(known, input, $.call({'': value}, '', value));\n  let firstRun = !i;\n  while (i < input.length) {\n    firstRun = true;\n    output[i] = $stringify(input[i++], replace, space);\n  }\n  return '[' + output.join(',') + ']';\n  function replace(key, value) {\n    if (firstRun) {\n      firstRun = !firstRun;\n      return value;\n    }\n    const after = $.call(this, key, value);\n    switch (typeof after) {\n      case object:\n        if (after === null) return after;\n      case primitive:\n        return known.get(after) || set(known, input, after);\n    }\n    return after;\n  }\n};\n\nexport const toJSON = any => $parse(stringify(any));\nexport const fromJSON = any => parse($stringify(any));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {asyncParse, debounce} from \"./utils/sse.utils\";\r\n\r\n\r\nconst reloadWindow = async function () {\r\n  if (location.href.includes(\"submitEnvironment\")) {\r\n    const hostName = window.location.protocol + \"//\" + window.location.host + \"\";\r\n    window.location.replace(hostName);\r\n    return false;\r\n  } else {\r\n    window.location.reload();\r\n    return false;\r\n  }\r\n};\r\n\r\n// Keeping hold of this, may return a use for later...\r\n// function checkUpdateAndNotify(updateResponse) {\r\n//   if (!!updateResponse?.update_available && !pageReloadPersistedRead) {\r\n//     // Show the notification once per page load\r\n//     pageReloadPersistedRead = true;\r\n//     // Disregard notification if it it's version is already stored\r\n//     let parsedStorageReleaseInfo;\r\n//     try {\r\n//       parsedStorageReleaseInfo = JSON.parse(localStorage.getItem(notificationMarkReadSessionKey));\r\n//     } catch (e) {\r\n//       parsedStorageReleaseInfo = null;\r\n//     }\r\n//     // If the update button is available, we are on the system page. React to available updates accordingly.\r\n//     let updateOctoFarmBtn = document.getElementById(\"updateOctoFarmBtn\");\r\n//     if (updateOctoFarmBtn) {\r\n//       updateOctoFarmBtn.disabled = false;\r\n//     }\r\n//     // Process the full notification or a shorter reminder\r\n//     if (\r\n//       !parsedStorageReleaseInfo ||\r\n//       parsedStorageReleaseInfo?.tag_name !== updateResponse?.latestReleaseKnown?.tag_name\r\n//     ) {\r\n//       if (window.location?.href.includes(\"/system\")) {\r\n//         return;\r\n//       }\r\n//\r\n//       var n = new noty({\r\n//         type: \"success\",\r\n//         theme: \"bootstrap-v4\",\r\n//         layout: \"bottomRight\",\r\n//         text: updateResponse?.message,\r\n//         buttons: [\r\n//           noty.button(\r\n//             \"UPDATE\",\r\n//             \"btn btn-success\",\r\n//             function () {\r\n//               window.location = \"/system\";\r\n//             },\r\n//             { id: \"button1\", \"data-status\": \"ok\" }\r\n//           ),\r\n//           noty.button(\"Mark read\", \"btn btn-error\", function () {\r\n//             // Update the stored version to become the newest\r\n//             localStorage.setItem(\r\n//               notificationMarkReadSessionKey,\r\n//               JSON.stringify(updateResponse.latestReleaseKnown)\r\n//             );\r\n//             n.close();\r\n//           }),\r\n//           noty.button(\"Later\", \"btn btn-error\", function () {\r\n//             n.close();\r\n//           })\r\n//         ]\r\n//       });\r\n//       n.show();\r\n//     } else {\r\n//       UI.createAlert(\r\n//         \"success\",\r\n//         `A small reminder: OctoFarm update available from ${updateResponse.current_version} to ${updateResponse?.latestReleaseKnown?.tag_name} ;)`,\r\n//         1000,\r\n//         \"clicked\"\r\n//       );\r\n//     }\r\n//   }\r\n// }\r\n// reconnectFrequencySeconds doubles every retry\r\nlet reconnectFrequencySeconds = 3;\r\nlet evtSource;\r\nlet countDownInterval = false;\r\nlet triggerTimeout = false;\r\nlet countDownSeconds = 0;\r\nlet reloadListenerAdded = false;\r\n\r\nconst reconnectFunc = debounce(\r\n  function () {\r\n    setupEventSource();\r\n    // Double every attempt to avoid overwhelming server\r\n\r\n    reconnectFrequencySeconds *= 2;\r\n    // Max out at ~1 minute as a compromise between user experience and server load\r\n    if (reconnectFrequencySeconds >= 64) {\r\n      reconnectFrequencySeconds = 64;\r\n    }\r\n  },\r\n  function () {\r\n    return reconnectFrequencySeconds * 1000;\r\n  }\r\n);\r\n\r\nfunction triggerCountDownTimer(seconds){\r\n  countDownSeconds = seconds;\r\n  if(!countDownInterval){\r\n    countDownInterval = setInterval(() => {\r\n      if(reconnectFrequencySeconds <= 1){\r\n        //reset the counter\r\n        clearInterval(countDownInterval)\r\n        countDownInterval = false;\r\n      }else{\r\n        countDownSeconds = countDownSeconds - 1\r\n        document.getElementById(\"lostServerConnectionTimer\").innerHTML = countDownSeconds;\r\n      }\r\n    },1000)\r\n  }\r\n}\r\n\r\nfunction setupEventSource() {\r\n  evtSource = new EventSource(\"/amialive\");\r\n  evtSource.onmessage = async function (e) {\r\n    if (e?.data !== null) {\r\n      window.serverOffline = false;\r\n      await asyncParse(e.data);\r\n      const lostServerConnectionModal = document.getElementById(\"lostServerConnection\");\r\n      if (lostServerConnectionModal && lostServerConnectionModal.className.includes(\"show\")) {\r\n        // If user has login enabled then we need to refresh the session...\r\n        if(!!e.data.loginRequired){\r\n          await reloadWindow()\r\n        }else{\r\n          await closeModal();\r\n        }\r\n\r\n      }\r\n    }\r\n  };\r\n  evtSource.onopen = function (e) {\r\n    console.debug(\"Connected to servers Am I Alive stream...\");\r\n    // Reset reconnect frequency upon successful connection\r\n    reconnectFrequencySeconds = 3;\r\n  };\r\n  evtSource.onerror = async function (e) {\r\n    window.serverOffline = true;\r\n    console.debug(\"Server connection lost! Re-connecting in... \" + reconnectFrequencySeconds + \"s\");\r\n    triggerCountDownTimer(reconnectFrequencySeconds)\r\n    console.error(e);\r\n    await drawModal();\r\n    evtSource.close();\r\n    reconnectFunc();\r\n  };\r\n  evtSource.onclose = async function (e) {\r\n    window.serverOffline = true;\r\n    console.debug(\"Server connection closed! Re-establishing...\" + reconnectFrequencySeconds + \"s\");\r\n    triggerCountDownTimer(reconnectFrequencySeconds)\r\n    console.warn(e);\r\n    await drawModal();\r\n    evtSource.close();\r\n    reconnectFunc();\r\n  };\r\n\r\n}\r\n\r\nconst drawModal = async function () {\r\n  if(!reloadListenerAdded){\r\n    document.getElementById(\"forceRefreshPageButton\").addEventListener(\"click\", () => {\r\n      reloadWindow();\r\n    })\r\n  }\r\n\r\n  if(!triggerTimeout){\r\n    triggerTimeout = setTimeout(() => {\r\n      $(\"#lostServerConnection\").modal(\"show\");\r\n      triggerTimeout = false;\r\n    },2000)\r\n  }\r\n};\r\nconst closeModal = async function () {\r\n  $(\"#lostServerConnection\").modal(\"hide\");\r\n};\r\n\r\nsetupEventSource();\r\n"],"sourceRoot":""}