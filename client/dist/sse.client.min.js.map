{"version":3,"sources":["webpack://@notexpectedyet/octofarm-client/./node_modules/flatted/esm/index.js","webpack://@notexpectedyet/octofarm-client/./js/utils/sse.utils.js","webpack://@notexpectedyet/octofarm-client/./js/sse.client.js"],"names":["parse","$parse","stringify","$stringify","JSON","keys","Object","Primitive","String","ignore","object","noop","_","value","primitives","Primitives","revive","input","parsed","output","$","lazy","ke","length","y","k","tmp","has","call","add","push","a","i","apply","isFunction","functionToCheck","toString","evtSource","evtURL","reconnectFrequencySeconds","reconnectFunc","func","wait","timeout","waitFunc","context","this","args","arguments","later","clearTimeout","setTimeout","debounce","setupEventSource","url","EventSource","onmessage","async","e","data","res","str","text","reviver","map","Set","asyncParse","postMessage","onopen","console","debug","onerror","error","close","onclose","self","addEventListener"],"mappings":";mBAEA,MAAOA,MAAOC,EAAQC,UAAWC,GAAcC,MACzC,KAACC,GAAQC,OAETC,EAAYC,OAGZC,EAAS,GACTC,EAAS,SAETC,EAAO,CAACC,EAAGC,IAAUA,EAErBC,EAAaD,GACjBA,aAAiBN,EAAYA,EAAUM,GAASA,EAG5CE,EAAa,CAACH,EAAGC,IAXL,iBAYTA,EAAsB,IAAIN,EAAUM,GAASA,EAGhDG,EAAS,CAACC,EAAOC,EAAQC,EAAQC,KACrC,MAAMC,EAAO,GACb,IAAK,IAAIC,EAAKjB,EAAKc,IAAS,OAACI,GAAUD,EAAIE,EAAI,EAAGA,EAAID,EAAQC,IAAK,CACjE,MAAMC,EAAIH,EAAGE,GACPX,EAAQM,EAAOM,GACrB,GAAIZ,aAAiBN,EAAW,CAC9B,MAAMmB,EAAMT,EAAMJ,UACPa,IAAQhB,GAAWQ,EAAOS,IAAID,GAMvCP,EAAOM,GAAKL,EAAEQ,KAAKT,EAAQM,EAAGC,IAL9BR,EAAOW,IAAIH,GACXP,EAAOM,GAAKhB,EACZY,EAAKS,KAAK,CAACL,IAAGM,EAAG,CAACd,EAAOC,EAAQQ,EAAKN,WAKjCD,EAAOM,KAAOhB,IACrBU,EAAOM,GAAKL,EAAEQ,KAAKT,EAAQM,EAAGZ,IAElC,IAAK,IAAI,OAACU,GAAUF,EAAMW,EAAI,EAAGA,EAAIT,EAAQS,IAAK,CAChD,MAAM,EAACP,EAAC,EAAEM,GAAKV,EAAKW,GACpBb,EAAOM,GAAKL,EAAEQ,KAAKT,EAAQM,EAAGT,EAAOiB,MAAM,KAAMF,IAEnD,OAAOZ,GClCIe,EAAa,SAAUC,GAClC,OAAOA,GAAyD,sBAAtC,GAAGC,SAASR,KAAKO,ICP7C,IACIE,EACAC,EAFAC,EAA4B,EAIhC,MAAMC,EDMkB,SAAUC,EAAMC,GACtC,IAAIC,EACAC,EACJ,OAAO,WAEHA,EADEV,EAAWQ,GACFA,EAEA,WACT,OAAOA,GAIX,MAAMG,EAAUC,KACdC,EAAOC,UACHC,EAAQ,WACZN,EAAU,KACVF,EAAKR,MAAMY,EAASE,IAEtBG,aAAaP,GACbA,EAAUQ,WAAWF,EAAOL,MCzBVQ,EACpB,WACEC,IAEAd,GAA6B,EAEzBA,GAA6B,KAC/BA,EAA4B,OAGhC,WACE,OAAmC,IAA5BA,KAIX,SAASc,EAAiBC,GACpBA,EACFhB,EAASgB,EAETA,EAAMhB,EAERD,EAAY,IAAIkB,YAAYD,GAC5BjB,EAAUmB,UAAYC,eAAgBC,GACpC,GAAMA,EAAEC,KAAM,CACZ,MAAMC,QD7BcH,eAAgBI,GACxC,IACE,MDgDiB,EAACC,EAAMC,KAC1B,MAAM9C,EAAQhB,EAAO6D,EAAM/C,GAAYiD,IAAIlD,GACrCD,EAAQI,EAAM,GACdG,EAAI2C,GAAWpD,EACfe,SAAab,IAAUH,GAAUG,EAC3BG,EAAOC,EAAO,IAAIgD,IAAKpD,EAAOO,GAC9BP,EACZ,OAAOO,EAAEQ,KAAK,CAAC,GAAIF,GAAM,GAAIA,ICvDpB1B,CAAM6D,GACb,MAAOH,GACP,OAAO,GCyBaQ,CAAWR,EAAEC,MAC/BQ,YAAYP,KAGhBvB,EAAU+B,OAAS,SAAUV,GAC3BW,QAAQC,MAAM,gBAAkBhB,GAEhCf,EAA4B,GAE9BF,EAAUkC,QAAUd,eAAgBC,GAClCW,QAAQG,MAAM,iCACdL,aAAY,GACZ9B,EAAUoC,QACVjC,KAEFH,EAAUqC,QAAUjB,iBAClBY,QAAQG,MAAM,6BACdL,aAAY,GACZ9B,EAAUoC,QACVjC,KAIJmC,KAAKC,iBACH,WACA,SAAUlB,GAERL,EADYK,EAAEC,KAAKL,QAGrB,I","file":"sse.client.min.js","sourcesContent":["/*! (c) 2020 Andrea Giammarchi */\n\nconst {parse: $parse, stringify: $stringify} = JSON;\nconst {keys} = Object;\n\nconst Primitive = String;   // it could be Number\nconst primitive = 'string'; // it could be 'number'\n\nconst ignore = {};\nconst object = 'object';\n\nconst noop = (_, value) => value;\n\nconst primitives = value => (\n  value instanceof Primitive ? Primitive(value) : value\n);\n\nconst Primitives = (_, value) => (\n  typeof value === primitive ? new Primitive(value) : value\n);\n\nconst revive = (input, parsed, output, $) => {\n  const lazy = [];\n  for (let ke = keys(output), {length} = ke, y = 0; y < length; y++) {\n    const k = ke[y];\n    const value = output[k];\n    if (value instanceof Primitive) {\n      const tmp = input[value];\n      if (typeof tmp === object && !parsed.has(tmp)) {\n        parsed.add(tmp);\n        output[k] = ignore;\n        lazy.push({k, a: [input, parsed, tmp, $]});\n      }\n      else\n        output[k] = $.call(output, k, tmp);\n    }\n    else if (output[k] !== ignore)\n      output[k] = $.call(output, k, value);\n  }\n  for (let {length} = lazy, i = 0; i < length; i++) {\n    const {k, a} = lazy[i];\n    output[k] = $.call(output, k, revive.apply(null, a));\n  }\n  return output;\n};\n\nconst set = (known, input, value) => {\n  const index = Primitive(input.push(value) - 1);\n  known.set(value, index);\n  return index;\n};\n\nexport const parse = (text, reviver) => {\n  const input = $parse(text, Primitives).map(primitives);\n  const value = input[0];\n  const $ = reviver || noop;\n  const tmp = typeof value === object && value ?\n              revive(input, new Set, value, $) :\n              value;\n  return $.call({'': tmp}, '', tmp);\n};\n\nexport const stringify = (value, replacer, space) => {\n  const $ = replacer && typeof replacer === object ?\n            (k, v) => (k === '' || -1 < replacer.indexOf(k) ? v : void 0) :\n            (replacer || noop);\n  const known = new Map;\n  const input = [];\n  const output = [];\n  let i = +set(known, input, $.call({'': value}, '', value));\n  let firstRun = !i;\n  while (i < input.length) {\n    firstRun = true;\n    output[i] = $stringify(input[i++], replace, space);\n  }\n  return '[' + output.join(',') + ']';\n  function replace(key, value) {\n    if (firstRun) {\n      firstRun = !firstRun;\n      return value;\n    }\n    const after = $.call(this, key, value);\n    switch (typeof after) {\n      case object:\n        if (after === null) return after;\n      case primitive:\n        return known.get(after) || set(known, input, after);\n    }\n    return after;\n  }\n};\n\nexport const toJSON = any => $parse(stringify(any));\nexport const fromJSON = any => parse($stringify(any));\n","import {parse} from \"flatted\";\r\n\r\nexport const asyncParse = async function (str) {\r\n  try {\r\n    return parse(str);\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\nexport const isFunction = function (functionToCheck) {\r\n  return functionToCheck && {}.toString.call(functionToCheck) === \"[object Function]\";\r\n};\r\n\r\nexport const debounce = function (func, wait) {\r\n  let timeout;\r\n  let waitFunc;\r\n  return function () {\r\n    if (isFunction(wait)) {\r\n      waitFunc = wait;\r\n    } else {\r\n      waitFunc = function () {\r\n        return wait;\r\n      };\r\n    }\r\n\r\n    const context = this,\r\n      args = arguments;\r\n    const later = function () {\r\n      timeout = null;\r\n      func.apply(context, args);\r\n    };\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, waitFunc());\r\n  };\r\n};\r\n","import {asyncParse, debounce} from \"./utils/sse.utils\";\r\n\r\n// reconnectFrequencySeconds doubles every retry\r\nlet reconnectFrequencySeconds = 1;\r\nlet evtSource;\r\nlet evtURL;\r\n\r\nconst reconnectFunc = debounce(\r\n  function () {\r\n    setupEventSource();\r\n    // Double every attempt to avoid overwhelming server\r\n    reconnectFrequencySeconds *= 2;\r\n    // Max out at ~1 minute as a compromise between user experience and server load\r\n    if (reconnectFrequencySeconds >= 64) {\r\n      reconnectFrequencySeconds = 64;\r\n    }\r\n  },\r\n  function () {\r\n    return reconnectFrequencySeconds * 1000;\r\n  }\r\n);\r\n\r\nfunction setupEventSource(url) {\r\n  if (url) {\r\n    evtURL = url;\r\n  } else {\r\n    url = evtURL;\r\n  }\r\n  evtSource = new EventSource(url);\r\n  evtSource.onmessage = async function (e) {\r\n    if (!!e.data) {\r\n      const res = await asyncParse(e.data);\r\n      postMessage(res);\r\n    }\r\n  };\r\n  evtSource.onopen = function (e) {\r\n    console.debug(\"Connected to \" + url);\r\n    // Reset reconnect frequency upon successful connection\r\n    reconnectFrequencySeconds = 1;\r\n  };\r\n  evtSource.onerror = async function (e) {\r\n    console.error(\"Issue with SSE connection... \");\r\n    postMessage(false);\r\n    evtSource.close();\r\n    reconnectFunc();\r\n  };\r\n  evtSource.onclose = async function () {\r\n    console.error(\"Closed SSE connection... \");\r\n    postMessage(false);\r\n    evtSource.close();\r\n    reconnectFunc();\r\n  };\r\n}\r\n\r\nself.addEventListener(\r\n  \"message\",\r\n  function (e) {\r\n    const url = e.data.url;\r\n    setupEventSource(url);\r\n  },\r\n  false\r\n);\r\n"],"sourceRoot":""}